package hackfest.pheonix.haptiq.Activities;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.github.nkzawa.emitter.Emitter;
import com.github.nkzawa.socketio.client.IO;
import com.github.nkzawa.socketio.client.Socket;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;

import org.json.JSONObject;

import java.net.URISyntaxException;
import java.util.HashMap;

import hackfest.pheonix.haptiq.Constants;
import hackfest.pheonix.haptiq.Encryption;
import hackfest.pheonix.haptiq.R;

public class MainActivity extends AppCompatActivity {

    Button scanCode, addNewCredentials;
    TextView pairingStatus;
    IntentIntegrator intentIntegrator;
    private Socket mSocket;
    SharedPreferences sharedPreferences;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        sharedPreferences = getSharedPreferences(Constants.PREF_IDS, MODE_PRIVATE);
        scanCode = (Button) findViewById(R.id.scanCode);
        pairingStatus = (TextView) findViewById(R.id.pairingStatus);
        addNewCredentials = (Button) findViewById(R.id.addCredentials);
        //Connect to socket and get id
        try {
            mSocket = IO.socket(Constants.SOCKET_IP);
        } catch (URISyntaxException e) {
            e.printStackTrace();
        }
        mSocket.connect();

        String socketId = sharedPreferences.getString(Constants.SOCKET_ID, "");
        if (socketId.isEmpty()) {
            //First time pairing
            mSocket.emit("phone-join");
            mSocket.on("join-with", new Emitter.Listener() {
                @Override
                public void call(Object... args) {
                    Log.e("demo", args[0].toString() + " length " + args[0].toString().length());
                    sharedPreferences.edit().putString(Constants.SOCKET_ID, args[0].toString()).apply();
                }
            });
        }

        boolean isChromeExists = sharedPreferences.getBoolean(Constants.CHROME_ID_EXISTS, false);

        if (isChromeExists) {
            pairingStatus.setVisibility(View.VISIBLE);
            pairingStatus.setText("This device is already paired with a Chrome Extension with Extension ID " +
                    sharedPreferences.getString(Constants.CHROME_EXTENSION_ID, ""));
        } else {
            pairingStatus.setVisibility(View.GONE);
        }

        intentIntegrator = new IntentIntegrator(this);
        scanCode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                intentIntegrator.initiateScan();
            }
        });

        addNewCredentials.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent(MainActivity.this, AccessCredential.class));
                finish();
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // Handle activity result generated by QR code scanning
        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);
        if (result != null) {
            //if QRcode has nothing in it
            if (result.getContents() == null) {
                Toast.makeText(this, "Result Not Found. Scan again", Toast.LENGTH_LONG).show();
            } else {
                String qrCodeResult = result.getContents();
                try {
                    //QR result contains chrome extension Id and secret key
                    JSONObject object = new JSONObject(qrCodeResult);
                    sharedPreferences.edit().putString(Constants.CHROME_EXTENSION_ID, object.optString(Constants.CHROME_EXTENSION_ID)).apply();
                    String secretKey = object.optString(Constants.SECRET_KEY);
                    String encryptedKey = Encryption.getEncryptedKey(secretKey);
                    sharedPreferences.edit().putString(Constants.SECRET_KEY, encryptedKey).apply();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                //Create data to be sent for pairing
                HashMap<String, String> socketPairingData = new HashMap<>();
                socketPairingData.put(Constants.CHROME_EXTENSION_ID, sharedPreferences.getString(Constants.CHROME_EXTENSION_ID, ""));
                socketPairingData.put(Constants.SOCKET_ID, sharedPreferences.getString(Constants.SOCKET_ID, ""));
                socketPairingData.put(Constants.FCM_ID, sharedPreferences.getString(Constants.FCM_ID, ""));
                JSONObject jsonObject = new JSONObject(socketPairingData);

                // Send request for pairing
                mSocket.emit("pairing", jsonObject);
                startActivity(new Intent(MainActivity.this, AccessCredential.class));
                finish();
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        mSocket.disconnect();
        mSocket.off();
    }
}
